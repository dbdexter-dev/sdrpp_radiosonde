#include <string.h>
#include "decoder.hpp"
#include "decode/gps/ecef.h"
#include "decode/gps/time.h"
#include "decode/xdata.hpp"
extern "C" {
#include "rs41.h"
#include "utils.h"
}

/* Sane default calibration data, taken from a live radiosonde {{{ */
static const uint8_t _defaultCalibData[sizeof(RS41Calibration)] = {
	0xec, 0x5c, 0x80, 0x57, 0x03, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x33, 0x32,
	0x32, 0x30, 0x36, 0x35, 0x30, 0xf7, 0x4e, 0x00, 0x00, 0x58, 0x02, 0x12, 0x05, 0xb4, 0x3c, 0xa4,
	0x06, 0x14, 0x87, 0x32, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1e, 0x23,
	0xe8, 0x03, 0x01, 0x04, 0x00, 0x07, 0x00, 0xbf, 0x02, 0x91, 0xb3, 0x00, 0x06, 0x00, 0x80, 0x3b,
	0x44, 0x00, 0x80, 0x89, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0x2a, 0xe9, 0x73,
	0xc3, 0x5f, 0x28, 0x40, 0x3e, 0xbb, 0x92, 0x09, 0x37, 0xdd, 0xd6, 0xa0, 0x3f, 0xc5, 0x52, 0xd6,
	0xbd, 0x54, 0xe4, 0xb5, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x99, 0x30, 0x42, 0x6f, 0xd9, 0xa1, 0x40, 0xe1, 0x79, 0x29,
	0xbb, 0x52, 0x98, 0x0f, 0xc0, 0x5f, 0xc4, 0x1e, 0x41, 0xc3, 0x9f, 0x67, 0xc0, 0xe9, 0x6b, 0x59,
	0x42, 0x33, 0x9a, 0xba, 0xc2, 0x8e, 0xd2, 0x4e, 0x42, 0xc3, 0x7b, 0x1b, 0x42, 0xf8, 0x6f, 0x51,
	0x43, 0xf0, 0x37, 0xbd, 0xc3, 0xa8, 0xc5, 0x12, 0x41, 0x93, 0x3d, 0x9c, 0x41, 0xeb, 0x41, 0x16,
	0x43, 0x14, 0xe8, 0x16, 0xc3, 0x45, 0x28, 0x8c, 0xc3, 0x09, 0x4b, 0x36, 0x43, 0x4f, 0xf6, 0x4a,
	0x45, 0x6f, 0x3a, 0x7f, 0x45, 0x86, 0x91, 0x69, 0xc3, 0xf1, 0xaf, 0xac, 0x43, 0x8d, 0x37, 0x48,
	0x43, 0x7b, 0x1f, 0xc2, 0xc3, 0x87, 0x1a, 0x62, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x54, 0xd7, 0x61,
	0x43, 0xf4, 0x0c, 0x69, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0xba, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0xe9, 0x73, 0xc3, 0x5f, 0x28, 0x40, 0x3e, 0xbb, 0x92, 0x09,
	0x37, 0x80, 0xda, 0xa5, 0x3f, 0xa6, 0x1d, 0xc0, 0xbc, 0x82, 0x9e, 0xb3, 0x3b, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xff, 0xc6, 0x00, 0x41, 0x69, 0x30, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xcd, 0xcc, 0xcc, 0x3d, 0xbd, 0xff, 0x4b, 0xbf, 0x47, 0x49, 0x9e, 0xbd, 0x66, 0x36, 0xb1, 0x33,
	0x5b, 0x39, 0x8b, 0xb7, 0x1b, 0x8a, 0xf1, 0x39, 0x00, 0xe0, 0xaa, 0x44, 0xf0, 0x85, 0x49, 0x3c,
	0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x90, 0x40, 0x00, 0x00, 0xa0, 0x3f, 0x00, 0x00, 0x00, 0x00,
	0x33, 0x33, 0x33, 0x3f, 0x68, 0x91, 0x2d, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xe6, 0x96, 0x7e, 0x3f, 0x97, 0x82, 0x9b, 0xb8, 0xaa, 0x39, 0x23, 0x30,
	0xe4, 0x16, 0xcd, 0x29, 0xb5, 0x26, 0x5a, 0xa2, 0xfd, 0xeb, 0x02, 0x1a, 0xec, 0x51, 0x38, 0x3e,
	0x33, 0x33, 0x33, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xf6, 0x7f, 0x74, 0x40, 0x3b, 0x36, 0x82, 0xbf, 0xe5, 0x2f, 0x98, 0x3d, 0x00, 0x01, 0x00, 0x01,
	0xac, 0xac, 0xba, 0xbe, 0x0c, 0xe6, 0xab, 0x3e, 0x00, 0x00, 0x00, 0x40, 0x08, 0x39, 0xad, 0x41,
	0x89, 0x04, 0xaf, 0x41, 0x00, 0x00, 0x40, 0x40, 0xff, 0xff, 0xff, 0xc6, 0xff, 0xff, 0xff, 0xc6,
	0xff, 0xff, 0xff, 0xc6, 0xff, 0xff, 0xff, 0xc6, 0x52, 0x53, 0x34, 0x31, 0x2d, 0x53, 0x47, 0x00,
	0x00, 0x00, 0x52, 0x53, 0x4d, 0x34, 0x31, 0x32, 0x00, 0x00, 0x00, 0x00, 0x53, 0x33, 0x31, 0x31,
	0x30, 0x33, 0x31, 0x34, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00,
	0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x81, 0x23, 0x00,
	0x00, 0x1a, 0x02, 0x00, 0x02, 0x7b, 0xe5, 0xb5, 0x3f, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd5, 0xca, 0xa4, 0x3d, 0x5d, 0xa3, 0x65, 0x39, 0x7f, 0x87,
	0x22, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xfe, 0xb7, 0xbc, 0xc8, 0x96,
	0xe5, 0x3e, 0x31, 0x99, 0x1a, 0xbf, 0x12, 0xda, 0xda, 0x3e, 0xb6, 0x84, 0x68, 0xc1, 0x67, 0x55,
	0x57, 0x42, 0xd6, 0xc5, 0xaa, 0xc1, 0x84, 0x9e, 0xc7, 0xc1, 0xfd, 0xbc, 0x3e, 0x41, 0x1e, 0x16,
	0x4c, 0xc2, 0x7c, 0xb8, 0x8b, 0x41, 0xbb, 0x32, 0xf4, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x14, 0x00,
	0xc8, 0x00, 0x46, 0x00, 0x3c, 0x00, 0x05, 0x00, 0x3c, 0x00, 0x18, 0x01, 0x9e, 0x62, 0xd5, 0xb8,
	0x6c, 0x9c, 0x07, 0xb1, 0x00, 0x3c, 0x88, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xf3, 0x6a, 0xc0, 0xf1, 0x5b, 0x02, 0x07, 0x00, 0x00, 0x05, 0x6d, 0x01, 0x1b, 0x94, 0x00, 0x00
};
/* }}} */

RS41Decoder::RS41Decoder()
{
	m_rs = correct_reed_solomon_create(RS41_REEDSOLOMON_POLY,
	                                  RS41_REEDSOLOMON_FIRST_ROOT,
	                                  RS41_REEDSOLOMON_ROOT_SKIP,
	                                  RS41_REEDSOLOMON_T);
}

RS41Decoder::RS41Decoder(dsp::stream<uint8_t> *in, void (*handler)(SondeData *data, void *ctx), void *ctx)
{
	init(in, handler, ctx);
}

RS41Decoder::~RS41Decoder()
{
	if (!generic_block<RS41Decoder>::_block_init) return;
	generic_block<RS41Decoder>::stop();
	generic_block<RS41Decoder>::unregisterInput(m_in);
	generic_block<RS41Decoder>::_block_init = false;
}

void
RS41Decoder::init(dsp::stream<uint8_t> *in, void (*handler)(SondeData *data, void *ctx), void *ctx)
{
	m_in = in;
	m_ctx = ctx;
	m_handler = handler;
	m_rs = correct_reed_solomon_create(RS41_REEDSOLOMON_POLY,
	                                  RS41_REEDSOLOMON_FIRST_ROOT,
	                                  RS41_REEDSOLOMON_ROOT_SKIP,
	                                  RS41_REEDSOLOMON_T);
	m_sondeData.init();
	m_sondeData.type = "RS41";
	m_calibrated = false;
	memcpy(&m_calibData, _defaultCalibData, sizeof(_defaultCalibData));
	memset(m_calibDataBitmap, 0xFF, sizeof(m_calibDataBitmap));
	m_calibDataBitmap[sizeof(m_calibDataBitmap)-1] &= ~((1 << (7 - (RS41_CALIB_FRAGCOUNT-1)%8)) - 1);


	generic_block<RS41Decoder>::registerInput(m_in);
	generic_block<RS41Decoder>::_block_init = true;
}

void
RS41Decoder::setInput(dsp::stream<uint8_t>* in)
{
	generic_block<RS41Decoder>::tempStop();
	generic_block<RS41Decoder>::unregisterInput(m_in);

	m_in = in;
	m_sondeData.init("RS41");
	m_calibrated = false;
	memset(m_calibDataBitmap, 0xFF, sizeof(m_calibDataBitmap));
	m_calibDataBitmap[sizeof(m_calibDataBitmap)-1] &= ~((1 << (7 - (RS41_CALIB_FRAGCOUNT-1)%8)) - 1);

	generic_block<RS41Decoder>::registerInput(m_in);
	generic_block<RS41Decoder>::tempStart();
}

void
RS41Decoder::doStop()
{
	m_sondeData.init("RS41");
	generic_block<RS41Decoder>::doStop();
}


int
RS41Decoder::run()
{
	RS41Frame *frame;
	RS41Subframe *subframe;
	float oldPressure;
	int offset, outCount, numFrames, bytesLeft;
	bool newData = false;

	assert(generic_block<RS41Decoder>::_block_init);
	if ((numFrames = m_in->read()) < 0) return -1;

	outCount = 0;
	numFrames /= sizeof(*frame);

	/* For each frame that was received */
	for (int i=0; i<numFrames; i++) {
		frame = (RS41Frame*)(m_in->readBuf + i*sizeof(*frame));

		/* Descramble and error correct */
		rs41_descramble(frame);
		if (m_rs) rs41_correct(frame, m_rs);

		bytesLeft = RS41_DATA_LEN/8 + (frame->extended_flag == RS41_FLAG_EXTENDED ? RS41_XDATA_LEN/8 : 0);
		if (frame->extended_flag != RS41_FLAG_EXTENDED) m_sondeData.auxData = "";

		offset = 0;
		while (offset < bytesLeft) {
			subframe = (RS41Subframe*)&frame->data[offset];
			offset += subframe->len + 4;

			/* Verify that end of the subframe is still within bounds */
			if (offset > bytesLeft) break;

			/* Check subframe checksum */
			if (!rs41_crc_check(subframe)) continue;
			newData = true;

			/* Update the generic info struct with the data inside the subframe */
			updateSondeData(&m_sondeData, subframe);
		}

		if (newData) {
			m_handler(&m_sondeData, m_ctx);
			outCount++;
		}
	}

	m_in->flush();
	return outCount;
}

/* Private methods {{{ */

void
RS41Decoder::updateSondeData(SondeData *info, RS41Subframe *subframe)
{
	RS41Subframe_Status *status;
	RS41Subframe_PTU *ptu;
	RS41Subframe_GPSInfo *gpsinfo;
	RS41Subframe_GPSPos *gpspos;
	RS41Subframe_XDATA *xdata;

	float x, y, z, dx, dy, dz;
	char termSerial[RS41_SERIAL_LEN + 1];
	bool hasPressureSensor = false;

	switch (subframe->type) {
		case RS41_SFTYPE_INFO:
			status = (RS41Subframe_Status*)subframe;

			info->calibrated = updateCalibData(status);
			strncpy(termSerial, status->serial, RS41_SERIAL_LEN);
			termSerial[RS41_SERIAL_LEN] = 0;
			info->serial = termSerial;
			info->burstkill = m_calibData.burstkill_timer == 0xFFFF ? -1 : m_calibData.burstkill_timer;
			info->seq = status->frame_seq;
			break;
		case RS41_SFTYPE_PTU:
			ptu = (RS41Subframe_PTU*)subframe;

			info->temp = rs41_temp(ptu, &m_calibData);
			info->rh = rs41_rh(ptu, &m_calibData);
			if (rs41_pressure(ptu, &m_calibData) > 0) {
				hasPressureSensor = true;
				info->pressure = rs41_pressure(ptu, &m_calibData);  /* Pressure sensor is optional */
			}
			info->dewpt = dewpt(info->temp, info->rh);
			break;
		case RS41_SFTYPE_GPSPOS:
			gpspos = (RS41Subframe_GPSPos*)subframe;
			x = gpspos->x / 100.0;
			y = gpspos->y / 100.0;
			z = gpspos->z / 100.0;
			dx = gpspos->dx / 100.0;
			dy = gpspos->dy / 100.0;
			dz = gpspos->dz / 100.0;

			ecef_to_lla(&info->lat, &info->lon, &info->alt, x, y, z);
			ecef_to_spd_hdg(&info->spd, &info->hdg, &info->climb, info->lat, info->lon, dx, dy, dz);

			if (!hasPressureSensor) info->pressure = altitude_to_pressure(info->alt);

			break;
		case RS41_SFTYPE_GPSINFO:
			gpsinfo = (RS41Subframe_GPSInfo*)subframe;
			info->time = gps_time_to_utc(gpsinfo->week, gpsinfo->ms);
			break;
		case RS41_SFTYPE_XDATA:
			xdata = (RS41Subframe_XDATA*)subframe;
			info->rawAuxData = std::string(xdata->ascii_data, xdata->len - 1);
			info->auxData = decodeXDATA(info, xdata->ascii_data, xdata->len - 1);
			break;
		case RS41_SFTYPE_GPSRAW:
		case RS41_SFTYPE_EMPTY:
		default:
			break;
	}
}

bool
RS41Decoder::updateCalibData(RS41Subframe_Status* status)
{
	size_t fragOffset;
	int num_segments;

	/* Copy the fragment and update the bitmap of the fragments left */
	fragOffset = status->frag_seq * RS41_CALIB_FRAGSIZE;
	memcpy((uint8_t*)&m_calibData + fragOffset, status->frag_data, RS41_CALIB_FRAGSIZE);
	m_calibDataBitmap[status->frag_seq/8] &= ~(1 << (7-status->frag_seq%8));

	/* Check current calibration bitmap */
	for (auto i=0; i<sizeof(m_calibDataBitmap); i++) {
		if (m_calibDataBitmap[i]) return false;
	}

	return true;
}
/* }}} */
